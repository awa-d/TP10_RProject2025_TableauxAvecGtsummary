# Installation au besoin
invisible(lapply(packages, install_if_missing))
# Chargement des packages
lapply(packages, library, character.only = TRUE)
library(readr)
# Chargement du jeu de données EHCVM
dataset <- read_csv("data/ehcvm_welfare_2b_bfa2021.csv")
vars_interet <- c("hhid", "milieu", "pcexp","hmstat", "hhsize","hhandig", "hgender", "zref")
datasetapp <- dataset %>%
select(all_of(vars_interet))
head(datasetapp)
str(datasetapp)
dim(datasetapp)
# Pourcentage de valeurs manquantes
missing_data <- colSums(is.na(datasetapp)) / nrow(datasetapp) * 100
# Filtre
missing_data <- missing_data[missing_data > 0]
# Affichage
if (length(missing_data) == 0) {
cat("✅ Il n'y a pas de valeurs manquantes dans le dataset.\n")
} else {
cat("❌ Pourcentage de valeurs manquantes par variable :\n")
print(missing_data)
}
# Nombre de doublons
duplicate_count <- nrow(datasetapp[duplicated(datasetapp), ])
if (duplicate_count == 0) {
cat("✅ Il n'y a pas de doublons dans le dataset.\n")
} else {
cat("❌ Il y a", duplicate_count, "doublon(s) dans le dataset.\n")
}
set_gtsummary_theme(theme_gtsummary_compact())  # Appliquer le thème 'compact'
# Tableau récapitulatif avec tbl_summary() pour toutes les variables
tableau_general <- datasetapp %>%
tbl_summary(
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"
),
digits = list(all_continuous() ~ 1),
label = list(
pcexp ~ "Dépense par tête",
hhsize ~ "Taille du ménage",
milieu ~ "Milieu de résidence",
hmstat ~ "Statut matrimonial",
hgender ~ "Sexe du chef de ménage",
zref ~ "Seuil de pauvreté",
hhandig ~ "Présence de handicapés"
),
missing_text = "Données manquantes"
) %>%
add_n() %>%  # Ajouter le nombre d'observations
bold_labels() %>%  # Mettre les étiquettes en gras
italicize_levels() %>% # Mettre les niveaux en italique
modify_header(label ~ "**Noms de variables**") %>%  # Changer l'en-tête
modify_caption("**Tableau 1. Caractéristiques des ménages burkinabè (EHCVM 2021)**")
# Affichage du tableau
tableau_general
# Définition du seuil de pauvreté (zref)
# Création de variables pour l'analyse de la pauvreté
data_baseline <- datasetapp %>%
mutate(
pauvre = pcexp < zref,
gap = ifelse(pauvre, zref - pcexp, 0),
gap_normalise = gap / zref,
gap_normalise_carre = gap_normalise^2
)
# Calcul des indices FGT initiaux
fgt0_initial <- sum(data_baseline$pauvre * data_baseline$hhsize) / sum(data_baseline$hhsize)
fgt1_initial <- sum(data_baseline$gap_normalise * data_baseline$hhsize) / sum(data_baseline$hhsize)
fgt2_initial <- sum(data_baseline$gap_normalise_carre * data_baseline$hhsize) / sum(data_baseline$hhsize)
# Calcul du coefficient de Gini initial
gini_initial <- ineq(data_baseline$pcexp, type = "Gini")
# Affichage des indices initiaux
indices_initiaux <- data.frame(
Indicateur = c("Incidence (FGT0)initial", "Profondeur (FGT1)initial", "Sévérité (FGT2)initial", "Giniinitial"),
Valeur = c(fgt0_initial, fgt1_initial, fgt2_initial, gini_initial)
)
indices_gt <- indices_initiaux %>%
gt() %>%
tab_header(
title = md("**Tableau – Indices de pauvreté et d'inégalités (Scénario de base)**")
) %>%
cols_label(
Indicateur = "Indicateur",
Valeur = "Valeur"
) %>%
fmt_number(
columns = "Valeur",
decimals = 3
)
indices_gt
#library(ineq)
# Montant du transfert par ménage (annuel)
montant_transfert <- 100000
# Fonction pour simuler un transfert et calculer les indices
simuler_transfert <- function(dataset, condition, nom_scenario) {
data_sim <- dataset %>%
mutate(
beneficiaire = condition,
transfert = ifelse(beneficiaire, montant_transfert / hhsize, 0),
pcexp_new = pcexp + transfert,
pauvre_new = pcexp_new < zref,
gap_new = ifelse(pauvre_new, zref - pcexp_new, 0),
gap_normalise_new = gap_new / zref,
gap_normalise_carre_new = gap_normalise_new^2
)
# Calcul des indices FGT post-transfert
fgt0_new <- sum(data_sim$pauvre_new * data_sim$hhsize) / sum(data_sim$hhsize)
fgt1_new <- sum(data_sim$gap_normalise_new * data_sim$hhsize) / sum(data_sim$hhsize)
fgt2_new <- sum(data_sim$gap_normalise_carre_new * data_sim$hhsize) / sum(data_sim$hhsize)
# Coefficient de Gini post-transfert
gini_new <- ineq(data_sim$pcexp_new, type = "Gini")
# Coût total du programme
cout_total <- sum(data_sim$transfert * data_sim$hhsize)
# Réduction du gap de pauvreté
efficacite <- sum((dataset$gap - data_sim$gap_new) * data_sim$hhsize) / cout_total
return(list(
scenario = nom_scenario,
fgt0 = fgt0_new,
fgt1 = fgt1_new,
fgt2 = fgt2_new,
gini = gini_new,
cout = cout_total,
efficacite = efficacite,
data = data_sim
))
}
# Lancement des différents scénarios
scenario1 <- simuler_transfert(data_baseline, TRUE, "Universel")
scenario2 <- simuler_transfert(data_baseline, data_baseline$milieu == "Rural", "Rural")
scenario3 <- simuler_transfert(data_baseline, data_baseline$hgender == "Féminin", "Femme chef")
scenario4 <- simuler_transfert(data_baseline, data_baseline$hmstat == "Marié(e) polygame", "Polygames")
scenario5 <- simuler_transfert(data_baseline, data_baseline$hhandig == "Oui", "Handicap")
# Regrouper les résultats des 5 scénarios dans un tableau
resultats <- tibble::tibble(
Scénario = c(
scenario1$scenario, scenario2$scenario, scenario3$scenario, scenario4$scenario, scenario5$scenario
),
`FGT0 (Incidence)` = c(
scenario1$fgt0, scenario2$fgt0, scenario3$fgt0, scenario4$fgt0, scenario5$fgt0
),
`FGT1 (Profondeur)` = c(
scenario1$fgt1, scenario2$fgt1, scenario3$fgt1, scenario4$fgt1, scenario5$fgt1
),
`FGT2 (Sévérité)` = c(
scenario1$fgt2, scenario2$fgt2, scenario3$fgt2, scenario4$fgt2, scenario5$fgt2
),
`Gini` = c(
scenario1$gini, scenario2$gini, scenario3$gini, scenario4$gini, scenario5$gini
),
`Coût total (FCFA)` = c(
scenario1$cout, scenario2$cout, scenario3$cout, scenario4$cout, scenario5$cout
),
`Efficacité` = c(
scenario1$efficacite, scenario2$efficacite, scenario3$efficacite, scenario4$efficacite, scenario5$efficacite
)
)
#library(gt)
resultats_gt <- resultats %>%
gt() %>%
tab_header(
title = "Comparaison des scénarios de transfert monétaire",
subtitle = "Impact sur la pauvreté et les inégalités"
) %>%
fmt_percent(columns = starts_with("FGT"), decimals = 1) %>%
fmt_currency(columns = `Coût total (FCFA)`, currency = "XOF") %>%
fmt_number(columns = Efficacité, decimals = 3)
resultats_gt
#gt::gtsave(resultats_gt, filename = "Comparaison_des_scénarios_gt.html")
#library(flextable)
resultats_flex <- flextable(resultats) %>%
autofit() %>%
set_caption("Comparaison des scénarios de transfert monétaire")
resultats_flex
#flextable::save_as_html(resultats_flex, path = "Comparaison_des_scenarios_flextable.html") # HTML
#flextable::save_as_docx(resultats_flex, path = "Comparaison_des_scenarios_flextable.docx") #en word
#library(ggplot2)
#library(tidyr)
# Regrouper les résultats dans un format long pour faciliter la création de graphiques
resultats_long <- resultats %>%
pivot_longer(cols = c(`FGT0 (Incidence)`, `FGT1 (Profondeur)`, `FGT2 (Sévérité)`, `Gini`, `Coût total (FCFA)`, `Efficacité`),
names_to = "Indicateur", values_to = "Valeur")
# Créer un graphique pour chaque indicateur
ggplot(resultats_long, aes(x = Scénario, y = Valeur, fill = Scénario)) +
geom_bar(stat = "identity", position = "dodge") + #dodge : pas empilées (stack), mais placées côte à côte
facet_wrap(~ Indicateur, scales = "free_y") +
theme_minimal() +
labs(title = "Comparaison des Scénarios selon différents Indicateurs",
x = "Scénario",
y = "Valeur") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")
# Installer bookdown si nécessaire
install.packages("bookdown")
# Générer le livre en HTML
bookdown::render_book("pdg.Rmd", "bookdown::gitbook")
install.packages("bookdown")
# IMPORTATION
library(readr)
dataset <- read_csv("data/ehcvm_welfare_2b_bfa2021.csv")
View(dataset)
head(dataset)
names(dataset)
library(gtsummary)
tbl_summary_examplesimple <- dataset %>%
tbl_summary(
by = hgender,  # Stratification : les statistiques sont calculées séparément pour chaque sexe
include = hage,  # Seule 'hage' est dans le tableau
label = hage ~ "Age du chef de ménage",
statistic = all_continuous() ~ "{mean} ({sd})",  # Pour les variables continues, afficher la moyenne et l'écart-type
digits = all_continuous() ~ 2,  # Val num avec 2 décimales
missing = "ifany"  # Affichage explicite des valeurs manquantes si elles existent
)
# Affichage du tableau
tbl_summary_examplesimple
# Création d'un tableau de synthèse stratifié par la variable 'hage'
tbl_summary_example <- dataset %>%
tbl_summary(
by = hgender,
include = c(hage, hhsize, hmstat, hreligion, hdiploma, hhandig),  # Toutes ces variables seront incluses dans le tableau
label = list(
hage ~ "Âge du chef de ménage",
hhsize ~ "Taille du ménage",
hmstat ~ "Statut matrimonial du chef de ménage",
hreligion ~ "Religion",
hdiploma ~ "Plus haut diplôme du chef de ménage",
hhandig ~ "Des handicapés dans le ménage ?"
),
statistic = all_continuous() ~ "{mean} ({sd})",
digits = all_continuous() ~ 2,
missing = "ifany"
) %>%
modify_header(label ~ "**Noms de variables**") -> tbl_summary_example
# Affichage du tableau
tbl_summary_example
tbl_summary_overall <- tbl_summary_example %>%
add_overall(
last = TRUE,
col_label = "**Colonne des totaux ajouté** {N}"
)
tbl_summary_overall
tbl_summary_with_n <- tbl_summary_example %>%
add_n(
col_label = "**Effectif**",  # Intitulé de la colonne
statistic = "{N_nonmiss}",  # {p_miss}ou {N}...
) %>%
modify_table_styling(
columns = everything(),
footnote = "Nbre d'observations non manquantes"
)
# Afficher le tableau final
tbl_summary_with_n
# Modifier les en-têtes des colonnes
tbl_summary_modified <- tbl_summary_example %>%
modify_header(label~ "Nom de variables",stat_1 ~ "**Femmes**",
# Personnaliser l'en-tête de la col des var,
#de la 1ere colonne des statistiques
stat_2 ~ "**Hommes**"  # pour la 2e
)
# Afficher le tableau modifié
tbl_summary_modified
# Créer le tableau de synthèse personnalisé
tbl_summary_personalized <- dataset %>%
tbl_summary(
by = hmstat,
include = c(hage, hhsize)  # Sélection des variables
) %>%
add_overall() %>%  # Ajouter une colonne avec les statistiques globales
add_n() %>%  # Ajouter une colonne avec N (ou N manquants)
modify_header(label ~ "**Variables d'interet**") %>%  # Modifier l'en-tête des variables
modify_spanning_header(c("stat_1", "stat_2","stat_3", "stat_4" ,"stat_5", "stat_6", "stat_7") ~ "**Etat matrimonial**") %>%  # En-têtes englobants
modify_caption("Tableau modifié. Personnalisation") %>%  # Légende
bold_labels() %>%  # Mettre en gras les étiquettes des variables
italicize_labels()
# Afficher le tableau modifié
tbl_summary_personalized
tbl_1 <- dataset %>%
tbl_summary(by = milieu, include = c(hage, hhsize))
tbl_2 <- dataset %>%
tbl_summary(by = hgender, include = c(hage, hhsize))
# Fusionner les deux tableaux dans une liste
tbl_combined <- tbl_merge(
list(tbl_1, tbl_2),
tab_spanner = c("Tableau 1 - Par milieu de résidence", "Tableau 2 - Par sexe")
)%>%
modify_header(label~ "Nom de variables/Modalités")
# Afficher le tableau fusionné
tbl_combined
# Créer deux tableaux de statistiques descriptives
tbl_1 <- dataset %>%
tbl_summary(by = milieu, include = c(hage, hhsize))
tbl_2 <- dataset %>%
tbl_summary(by = hgender, include = c(hage, hhsize))
# Empiler les deux tableaux verticalement
tbl_stacked <- tbl_stack(
tbls = list(tbl_1, tbl_2),  # Passer les tableaux sous forme de liste
group_header = c("Tableau 1 - Par milieu", "Tableau 2 - Par sexe")
) %>%
modify_header(label ~ "Nom de variables")  # Appliquer après le stacking
# Afficher le tableau empilé
tbl_stacked
set_gtsummary_theme(theme_gtsummary_journal("qjecon"))  # Appliquer le thème
dataset |> tbl_summary(include = c(hage, hmstat))%>%
modify_header(label ~ "Nom de variables")
set_gtsummary_theme(theme_gtsummary_compact())  # Appliquer le thème 'compact'
dataset |> tbl_summary(include = c(hage, hmstat))%>%
modify_header(label ~ "Nom de variables")
# Installer le package manquant si nécessaire
if (!requireNamespace("fontBitstreamVera", quietly = TRUE)) {
install.packages("fontBitstreamVera")  # <- Peut corriger ton erreur initiale
}
# Chargement des packages
library(flextable)
library(officer)
# Si problème persiste malgré l'installation, tu peux fixer une police système classique :
set_flextable_defaults(font.family = "Arial")
# Génération du flextable
tbl_summary_flex <- tbl_summary_overall %>%
as_flex_table() %>%
autofit()
# Affichage dans la console (si RMarkdown ou RStudio Viewer)
tbl_summary_flex
# Création du dossier d'export si non existant
if (!dir.exists("./tableaux_exportes")) {
dir.create("./tableaux_exportes")
}
# Export en Word
save_as_docx(tbl_summary_flex, path = "./tableaux_exportes/tableau_exporté_chap1.docx")
message("✅ Le fichier 'tableau_exporté_chap1.docx' a été sauvegardé avec succès !")
# Exportation en format gt (pour HTML)
library(gt)
tbl_summary_gt <- tbl_summary_overall %>%
modify_header(label ~ "Nom de variables") %>%
as_gt() %>%
tab_header(
title = "Statistiques descriptives de l'EHCVM 2021",
subtitle = "Avec nos variables d'intéret"
) %>%
tab_options(
heading.background.color = "#4E79A7",
heading.title.font.size = 18,
heading.subtitle.font.size = 14,
column_labels.background.color = "#A0CBE8"
)
# Affichage du tableau gt
tbl_summary_gt
# Pour sauvegarder en HTML (décommenter pour utiliser)
gt::gtsave(tbl_summary_gt, filename = "./tableaux_exportes/tableau_exporté_chap1.html")
message("Le fichier 'tableau_exporté_chap1.html' a été sauvegardé avec succès !")
# Installer bookdown si nécessaire
install.packages("bookdown")
# Générer le livre en HTML
bookdown::render_book("pdg.Rmd", "bookdown::gitbook")
install.packages("bookdown")
# IMPORTATION
library(readr)
dataset <- read_csv("data/ehcvm_welfare_2b_bfa2021.csv")
View(dataset)
head(dataset)
names(dataset)
library(gtsummary)
tbl_summary_examplesimple <- dataset %>%
tbl_summary(
by = hgender,  # Stratification : les statistiques sont calculées séparément pour chaque sexe
include = hage,  # Seule 'hage' est dans le tableau
label = hage ~ "Age du chef de ménage",
statistic = all_continuous() ~ "{mean} ({sd})",  # Pour les variables continues, afficher la moyenne et l'écart-type
digits = all_continuous() ~ 2,  # Val num avec 2 décimales
missing = "ifany"  # Affichage explicite des valeurs manquantes si elles existent
)
# Affichage du tableau
tbl_summary_examplesimple
# Création d'un tableau de synthèse stratifié par la variable 'hage'
tbl_summary_example <- dataset %>%
tbl_summary(
by = hgender,
include = c(hage, hhsize, hmstat, hreligion, hdiploma, hhandig),  # Toutes ces variables seront incluses dans le tableau
label = list(
hage ~ "Âge du chef de ménage",
hhsize ~ "Taille du ménage",
hmstat ~ "Statut matrimonial du chef de ménage",
hreligion ~ "Religion",
hdiploma ~ "Plus haut diplôme du chef de ménage",
hhandig ~ "Des handicapés dans le ménage ?"
),
statistic = all_continuous() ~ "{mean} ({sd})",
digits = all_continuous() ~ 2,
missing = "ifany"
) %>%
modify_header(label ~ "**Noms de variables**") -> tbl_summary_example
# Affichage du tableau
tbl_summary_example
tbl_summary_overall <- tbl_summary_example %>%
add_overall(
last = TRUE,
col_label = "**Colonne des totaux ajouté** {N}"
)
tbl_summary_overall
tbl_summary_with_n <- tbl_summary_example %>%
add_n(
col_label = "**Effectif**",  # Intitulé de la colonne
statistic = "{N_nonmiss}",  # {p_miss}ou {N}...
) %>%
modify_table_styling(
columns = everything(),
footnote = "Nbre d'observations non manquantes"
)
# Afficher le tableau final
tbl_summary_with_n
# Modifier les en-têtes des colonnes
tbl_summary_modified <- tbl_summary_example %>%
modify_header(label~ "**Nom de variables**",stat_1 ~ "**Femmes**",
# Personnaliser l'en-tête de la col des var,
#de la 1ere colonne des statistiques
stat_2 ~ "**Hommes**"  # pour la 2e
)
# Afficher le tableau modifié
tbl_summary_modified
# Créer le tableau de synthèse personnalisé
tbl_summary_personalized <- dataset %>%
tbl_summary(
by = hmstat,
include = c(hage, hhsize)  # Sélection des variables
) %>%
add_overall() %>%  # Ajouter une colonne avec les statistiques globales
add_n() %>%  # Ajouter une colonne avec N (ou N manquants)
modify_header(label ~ "**Variables d'interet**") %>%  # Modifier l'en-tête des variables
modify_spanning_header(c("stat_1", "stat_2","stat_3", "stat_4" ,"stat_5", "stat_6", "stat_7") ~ "**Etat matrimonial**") %>%  # En-têtes englobants
modify_caption("Tableau modifié. Personnalisation") %>%  # Légende
bold_labels() %>%  # Mettre en gras les étiquettes des variables
italicize_labels()
# Afficher le tableau modifié
tbl_summary_personalized
tbl_1 <- dataset %>%
tbl_summary(by = milieu, include = c(hage, hhsize))
tbl_2 <- dataset %>%
tbl_summary(by = hgender, include = c(hage, hhsize))
# Fusionner les deux tableaux dans une liste
tbl_combined <- tbl_merge(
list(tbl_1, tbl_2),
tab_spanner = c("Tableau 1 - Par milieu de résidence", "Tableau 2 - Par sexe")
)%>%
modify_header(label~ "**Nom de variables/Modalités**")
# Afficher le tableau fusionné
tbl_combined
# Créer deux tableaux de statistiques descriptives
tbl_1 <- dataset %>%
tbl_summary(by = milieu, include = c(hage, hhsize))
tbl_2 <- dataset %>%
tbl_summary(by = hgender, include = c(hage, hhsize))
# Empiler les deux tableaux verticalement
tbl_stacked <- tbl_stack(
tbls = list(tbl_1, tbl_2),  # Passer les tableaux sous forme de liste
group_header = c("Tableau 1 - Par milieu", "Tableau 2 - Par sexe")
) %>%
modify_header(label ~ "**Nom de variables**")  # Appliquer après le stacking
# Afficher le tableau empilé
tbl_stacked
set_gtsummary_theme(theme_gtsummary_journal("qjecon"))  # Appliquer le thème
dataset |> tbl_summary(include = c(hage, hmstat))%>%
modify_header(label ~ "**Nom de variables**")
set_gtsummary_theme(theme_gtsummary_compact())  # Appliquer le thème 'compact'
dataset |> tbl_summary(include = c(hage, hmstat))%>%
modify_header(label ~ "**Nom de variables**")
# Installer le package manquant si nécessaire
if (!requireNamespace("fontBitstreamVera", quietly = TRUE)) {
install.packages("fontBitstreamVera")  # <- Peut corriger ton erreur initiale
}
# Chargement des packages
library(flextable)
library(officer)
# Si problème persiste malgré l'installation, tu peux fixer une police système classique :
set_flextable_defaults(font.family = "Arial")
# Génération du flextable
tbl_summary_flex <- tbl_summary_overall %>%
as_flex_table() %>%
autofit()
# Affichage dans la console (si RMarkdown ou RStudio Viewer)
tbl_summary_flex
# Création du dossier d'export si non existant
if (!dir.exists("./tableaux_exportes")) {
dir.create("./tableaux_exportes")
}
# Export en Word
save_as_docx(tbl_summary_flex, path = "./tableaux_exportes/tableau_exporté_chap1.docx")
message("✅ Le fichier 'tableau_exporté_chap1.docx' a été sauvegardé avec succès !")
# Exportation en format gt (pour HTML)
library(gt)
tbl_summary_gt <- tbl_summary_overall %>%
modify_header(label ~ "Nom de variables") %>%
as_gt() %>%
tab_header(
title = "Statistiques descriptives de l'EHCVM 2021",
subtitle = "Avec nos variables d'intéret"
) %>%
tab_options(
heading.background.color = "#4E79A7",
heading.title.font.size = 18,
heading.subtitle.font.size = 14,
column_labels.background.color = "#A0CBE8"
)
# Affichage du tableau gt
tbl_summary_gt
# Pour sauvegarder en HTML (décommenter pour utiliser)
gt::gtsave(tbl_summary_gt, filename = "./tableaux_exportes/tableau_exporté_chap1.html")
message("Le fichier 'tableau_exporté_chap1.html' a été sauvegardé avec succès !")
# Installer bookdown si nécessaire
install.packages("bookdown")
# Générer le livre en HTML
bookdown::render_book("pdg.Rmd", "bookdown::gitbook")
install.packages("bookdown")
